package com.red.gotrade.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.red.gotrade.model.AuthorModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AUTHOR_MODEL".
*/
public class AuthorModelDao extends AbstractDao<AuthorModel, Long> {

    public static final String TABLENAME = "AUTHOR_MODEL";

    /**
     * Properties of entity AuthorModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Author_token = new Property(1, String.class, "author_token", false, "AUTHOR_TOKEN");
        public final static Property Address = new Property(2, String.class, "address", false, "ADDRESS");
        public final static Property Author_nickname = new Property(3, String.class, "author_nickname", false, "AUTHOR_NICKNAME");
        public final static Property Phone = new Property(4, String.class, "phone", false, "PHONE");
        public final static Property Status = new Property(5, int.class, "status", false, "STATUS");
    }


    public AuthorModelDao(DaoConfig config) {
        super(config);
    }
    
    public AuthorModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AUTHOR_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"AUTHOR_TOKEN\" TEXT," + // 1: author_token
                "\"ADDRESS\" TEXT," + // 2: address
                "\"AUTHOR_NICKNAME\" TEXT," + // 3: author_nickname
                "\"PHONE\" TEXT," + // 4: phone
                "\"STATUS\" INTEGER NOT NULL );"); // 5: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AUTHOR_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AuthorModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String author_token = entity.getAuthor_token();
        if (author_token != null) {
            stmt.bindString(2, author_token);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(3, address);
        }
 
        String author_nickname = entity.getAuthor_nickname();
        if (author_nickname != null) {
            stmt.bindString(4, author_nickname);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(5, phone);
        }
        stmt.bindLong(6, entity.getStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AuthorModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String author_token = entity.getAuthor_token();
        if (author_token != null) {
            stmt.bindString(2, author_token);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(3, address);
        }
 
        String author_nickname = entity.getAuthor_nickname();
        if (author_nickname != null) {
            stmt.bindString(4, author_nickname);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(5, phone);
        }
        stmt.bindLong(6, entity.getStatus());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AuthorModel readEntity(Cursor cursor, int offset) {
        AuthorModel entity = new AuthorModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // author_token
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // address
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // author_nickname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // phone
            cursor.getInt(offset + 5) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AuthorModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAuthor_token(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAddress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAuthor_nickname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPhone(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStatus(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AuthorModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AuthorModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AuthorModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
